import 'package:flutter/material.dart';
import '../views/algorithm/earley_parser.dart';
import '../views/algorithm/grammar.dart';
import '../views/utils/textFormatter.dart';
import '../views/utils/production_rule_box.dart';
import 'result_page.dart';

class Body extends StatefulWidget {
  Body({super.key});
  @override
  _BodyState createState() => _BodyState();
}

class _BodyState extends State<Body> {
  String inputString = '';
  final _textController = TextEditingController();
  final _textSeparator = TextSeparator();
  List<Map<String, TextEditingController>> _controllers = [];
  Map<String, List<List<String>>> rules = {};

  @override
  void initState() {
    super.initState();
    var initialLeftController = TextEditingController(text: 'S');
    var initialRightController = TextEditingController(text: 'ɛ');

    _controllers.add({
      'left': initialLeftController,
      'right': initialRightController,
    });

    List<List<String>> listRight = _textSeparator.separateText(initialRightController.text);
    rules[initialLeftController.text] = listRight;
  }

  @override
  void dispose() {
    for (var controllerPair in _controllers) {
      controllerPair['left']!.dispose();
      controllerPair['right']!.dispose();
    }
    super.dispose();
  }

  void _addNewProd() {
    setState(() {
      var leftController = TextEditingController();
      var rightController = TextEditingController(text: 'ɛ');
      _controllers.add({
        'left': leftController,
        'right': rightController,
      });
    });
  }

  void _removeProd(int index) {
    if (index > 0) {
      setState(() {
        rules.remove(_controllers[index]['left']!.text);
        _controllers[index]['left']!.dispose();
        _controllers[index]['right']!.dispose();
        _controllers.removeAt(index);
      });
    }
  }

  void _resetProd() {
    setState(() {
      for (int i = _controllers.length - 1; i > 0; i--) {
        _controllers[i]['left']!.dispose();
        _controllers[i]['right']!.dispose();
      }
      _controllers.removeRange(1, _controllers.length);
      _controllers[0]['left']!.text = 'S';
      _controllers[0]['right']!.text = 'ɛ';

      rules.clear();
      rules['S'] = [['ɛ']];
    });
  }

  void _storeResult() {
    rules.clear();
    for (var controllerPair in _controllers) {
      String leftValue = controllerPair['left']!.text;
      String rightValue = controllerPair['right']!.text;
      if (!rules.containsKey(leftValue)) {
        List<List<String>> listRight = _textSeparator.separateText(rightValue);
        rules[leftValue] = listRight;
      } else {
        List<String> listRight = _textSeparator.separateTextDuplicate(rightValue);
        rules[leftValue]!.add(listRight);
      }
    }
  }

  void _showResultDialog(String resultMessage, {bool isSuccess = false, List<String>? nonTerminalsUsed, List<List<String>>? productionsUsed}) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Result'),
          content: Text(resultMessage),
          actions: [
            TextButton(
              child: Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
                if (isSuccess) {
                  _navigateToParseTreePage(nonTerminalsUsed!, productionsUsed!);
                }
              },
            ),
          ],
        );
      },
    );
  }

  void _navigateToParseTreePage(List<String> nonTerminalsUsed, List<List<String>> productionsUsed) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ResultTreePage(
          nonTerminalsUsed: nonTerminalsUsed,
          productionsUsed: productionsUsed,
        ),
      ),
    );
  }

  void _testGrammar() {
    _storeResult();
    Grammar grammar = Grammar(rules);
    EarleyParser parser = EarleyParser(grammar, 'S');
    String input = inputString.replaceAll(' ', '');
    bool success = parser.parse(input);
    if (success) {
      parser.generateParseTree(input);
      List<String> nonTerminalsUsed = parser.nonterminalsUsed;
      List<List<String>> productionsUsed = _textSeparator.convertTo2DList(parser.productionUsed);
      _showResultDialog(
        'The string "$input" can be generated by the grammar.',
        isSuccess: true,
        nonTerminalsUsed: nonTerminalsUsed,
        productionsUsed: productionsUsed,
      );
    } else {
      _showResultDialog('The string "$input" cannot be generated by the grammar.');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 45, vertical: 30),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.black,
          borderRadius: BorderRadius.circular(10),
        ),
        child: Padding(
          padding: EdgeInsets.all(30),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: EdgeInsets.only(bottom: 10),
                child: Text("Create Production Rule", style: TextStyle(color: Colors.white),),
              ),
              ListView.builder(
                shrinkWrap: true,
                itemCount: _controllers.length,
                itemBuilder: (context, index) {
                  return ProductionRuleBox(
                    leftController: _controllers[index]['left']!,
                    rightController: _controllers[index]['right']!,
                    readOnlyLeft: index == 0,
                    onRemove: index == 0 ? null : () => _removeProd(index),
                  );
                },
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                    onPressed: _addNewProd,
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.white),
                    child: Text("Add New Production", style: TextStyle(color: Colors.black),),
                  ),
                ],
              ),
              Padding(
                padding: EdgeInsets.symmetric(vertical: 20),
                child: TextFormField(
                  style: TextStyle(color: Colors.white),
                  inputFormatters: [LowerCaseTextFormatter()],
                  controller: _textController,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(),
                      enabledBorder: OutlineInputBorder(borderSide: BorderSide(color: Colors.white60)),
                      focusedBorder: OutlineInputBorder(borderSide: BorderSide(color: Colors.white),),
                      hintText: 'Input a string',
                      hintStyle: TextStyle(color: Colors.white60)
                  ),
                ),
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        inputString = _textController.text;
                      });
                      _testGrammar();
                    },
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.white),
                    child: Text("Test", style: TextStyle(color: Colors.black),),
                  ),
                  ElevatedButton(
                    onPressed: _resetProd,
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.white),
                    child: Text("Reset", style: TextStyle(color: Colors.black),),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}